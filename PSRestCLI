using System;
using System.Management.Automation;
using NATS.Client;

namespace PSRestCLI
{
    [Cmdlet( VerbsCommon.New, "PSRestProcessor")]
    public class NewPSRestProcessor : PSCmdlet
    {
        [Parameter(Position=0)]
        public Object InputObject { get; set; }

        protected override void EndProcessing()
        {
            this.WriteObject(this.InputObject);
            base.EndProcessing();
        }
    }

    [Cmdlet( VerbsCommon.Get, "PSRestCommands")]
    public class GetPSRestCommands : PSCmdlet
    {
        [Parameter(Position=0)]
        public Object InputObject { get; set; }

        protected override void EndProcessing()
        {
            this.WriteObject(this.InputObject);
            base.EndProcessing();
        }
    }

    [Cmdlet( VerbsCommon.Get, "Nats")]
    public class GetNats : PSCmdlet
    {
        [Parameter(Mandatory = false, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public string ProcessID { get; set; }

        [Parameter(Mandatory = false, Position = 1, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public string PublicKey { get; set; }

        [Parameter(Mandatory = false, Position = 2, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public string PrivateKey { get; set; }

        [Parameter(Mandatory = false, Position = 3, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public string S3AccessKey { get; set; }

        [Parameter(Mandatory = false, Position = 4, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public string S3SecretKey { get; set; }

        protected override void EndProcessing()
        {
            ConnectionFactory cf = new ConnectionFactory();
            IConnection c = cf.CreateConnection();

           // ISyncSubscription sSync = c.SubscribeSync("test");
          //  while(true){
        //        Msg m = sSync.NextMessage(10000);
      //          this.WriteObject(m);
    //        }

  //          this.WriteObject(this.InputObject);
//            base.EndProcessing();
        }
    }
}